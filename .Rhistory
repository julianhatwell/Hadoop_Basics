library(readr)
library(data.table)
library(dplyr)
fileloc <- "C:\\Dev\\Study\\Hadoop\\big_data_capstone_datasets_and_scripts\\"
folders <- paste0(c("chat", "combined", "flamingo"), "-data")
files <- list()
paths <- character(0)
for (folder in folders) {
files[[folder]] <- dir(paste0(fileloc, folder))
}
for (i in seq_along(folders)) {
paths[i] <- paste0(fileloc, folder)
}
listing <- character(0)
fullpathlisting <- character(0)
for (i in seq_along(folders)) {
listing <- c(listing, files[[folders[i]]])
fullpathlisting <- c(fullpathlisting
, paste0(fileloc
, folders[i]
, "\\"
, files[[folders[i]]]))
}
for (i in seq_along(listing)) {
print(paste("assigning", listing[i]))
headers <- !(grepl("^chat.*", listing[i]))
assign(listing[i], read_csv(fullpathlisting[i], col_names = headers, na = "NULL"))
}
length(unique(`buy-clicks.csv`$buyId))
sum(`buy-clicks.csv`$price)
lattice::barchart(tapply(`buy-clicks.csv`$buyId, `buy-clicks.csv`$buyId, length), horizontal = FALSE, ylab = "Number of items purchased", xlab = "buyId (item Id)")
lattice::barchart(tapply(`buy-clicks.csv`$price, `buy-clicks.csv`$buyId, sum), horizontal = FALSE, ylab = "Total Revenue", xlab = "buyId (item Id)")
lattice::barchart(head(sort(tapply(`buy-clicks.csv`$price, `buy-clicks.csv`$userId, sum), decreasing = TRUE), 10), horizontal = FALSE, xlab = "userId", ylab = "Total Revenue")
top3 <- head(sort(tapply(`buy-clicks.csv`$price, `buy-clicks.csv`$userId, sum), decreasing = TRUE), 3)
tapply(`game-clicks.csv`$isHit, `game-clicks.csv`$userId, function(x) {
sum(x)/length(x)
})[names(top3)]
numAdClicks <- tapply(`ad-clicks.csv`$txId, `ad-clicks.csv`$adCategory, length)
sum(numAdClicks * ifelse(names(numAdClicks) == "electronics", 0.75, 0.4))
hitRatio <- tapply(`game-clicks.csv`$isHit, `game-clicks.csv`$userId, function(x) { sum(x)/length(x) } )
HitRatio <- setkey(data.table(userId = as.numeric(dimnames(hitRatio)[[1]])
, hitRatio = hitRatio), userId)
lattice::densityplot(hitRatio)
totalMoneySpent <- tapply(`buy-clicks.csv`$price, `buy-clicks.csv`$userId, sum)
TotalMoneySpent <- setkey(data.table(userId = as.numeric(dimnames(totalMoneySpent)[[1]])
, totalMoneySpent = totalMoneySpent), userId)
lattice::densityplot(totalMoneySpent)
sessionStarts <- `user-session.csv`[`user-session.csv`$sessionType == "start",]
sessionEnds <- `user-session.csv`[`user-session.csv`$sessionType == "end",]
combinedSessions <- dplyr::inner_join(sessionStarts, sessionEnds, by = c("userSessionId", "userId"))
sessionDuration <- data.frame(userId = combinedSessions$userId
, sessionDuration = combinedSessions$timestamp.y - combinedSessions$timestamp.x)
totalTimeSpent <- tapply(sessionDuration$sessionDuration, sessionDuration$userId, sum)
TotalTimeSpent <- setkey(data.table(userId = as.numeric(dimnames(totalTimeSpent)[[1]])
, totalTimeSpent = totalTimeSpent), userId)
lattice::densityplot(totalTimeSpent)
naToZero <- function(x) {if (is.na(x)) 0 else x }
(comb <- TotalMoneySpent[J(TotalTimeSpent)][J(HitRatio)][, `:=`(
totalMoneySpent = sapply(totalMoneySpent, naToZero)
, totalTimeSpent = sapply(totalTimeSpent, naToZero))])
write.csv(HitRatio
, file=paste0(fileloc, "hitRatio.csv")
, row.names = FALSE)
write.csv(TotalMoneySpent
, file=paste0(fileloc, "totalMoneySpent.csv")
, row.names = FALSE)
write.csv(TotalTimeSpent
, file=paste0(fileloc, "totalTimeSpent.csv")
, row.names = FALSE)
write.csv(comb[totalTimeSpent > 0.00, ]
, file = paste0(fileloc, "HitsTimeMoney.csv")
, row.names = FALSE)
nonSessionClicks <- `game-clicks.csv`[`game-clicks.csv`$userId %in% as.numeric(comb[totalTimeSpent == 0.00, userId]),]
sessionsToCheck <- unique(nonSessionClicks$userSessionId)
# reported issues with the data
# write.csv(comb[totalTimeSpent == 0.00, userId]
#           , file=paste0(fileloc, "UsersNotInUserSessions.csv")
#           , row.names = FALSE)
#
# write.csv(sessionsToCheck
#           , file=paste0(fileloc, "SessionsNotInUserSessions.csv")
#           , row.names = FALSE)
# teams in team-assignments not in team
tnt <- unique(anti_join(`team-assignments.csv`, team.csv, by = c("team" = "teamId"))$team)
team.csv[team.csv$teamId %in% tnt, ]
`team-assignments.csv`[`team-assignments.csv`$team %in% team.csv$teamId, ]
# teams in team and team assignments
tit <- unique(`team-assignments.csv`[`team-assignments.csv`$team %in% team.csv$teamId, "team"])
lattice::barchart(sort(tapply(`buy-clicks.csv`$price, `buy-clicks.csv`$userId, sum), decreasing = TRUE), horizontal = FALSE, xlab = "userId", ylab = "Total Revenue")
lattice::barchart(sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE)
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue")
library(lattice)
trel <- trellis.par.get()
lattice::barchart(sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE)
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
lattice::barchart(sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE)
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue")
rev < sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE)
rev <- sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE)
rev
rev <- as.data.frame(sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev <- data.frame(sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev <- as.data.frame(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev$userId = row.names(rev)
unique(`user-session.csv`[, c("userId", "platformType")])
plat <- unique(`user-session.csv`[, c("userId", "platformType")])
inner_join(rev, plat)
str(rev)
str(plat)
rev <- as.data.frame(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev$userId = as.integer(row.names(rev))
rev <- as.data.frame(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev <- data.frame(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev$userId = as.integer(row.names(rev))
inner_join(rev, plat)
rev <- data.table(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev$userId = as.integer(row.names(rev))
plat <- data.table(unique(`user-session.csv`[, c("userId", "platformType")]))
rev[J(plat)]
rev <- setkey(data.table(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE)), userId)
rev$userId = as.integer(row.names(rev))
plat <- setkey(data.table(unique(`user-session.csv`[
, c("userId", "platformType")])), userId)
rev[J(plat)]
rev <- data.table(revenue = sort(tapply(`buy-clicks.csv`$price
, `buy-clicks.csv`$userId
, sum)
, decreasing = TRUE))
rev$userId = as.integer(row.names(rev))
setkey(rev, userId)
plat <- setkey(data.table(unique(`user-session.csv`[
, c("userId", "platformType")])), userId)
rev[J(plat)]
plat[J(rev)]
`user-session.csv`[userId == 4, ]
`user-session.csv`[, ]
plat <- setkey(data.table(unique(`user-session.csv`[sessionType == "start"
, c("userId", "platformType")])), userId)
plat <- setkey(data.table(unique(`user-session.csv`[`user-session.csv`$sessionType == "start"
, c("userId", "platformType")])), userId)
plat[userId == 202]
plat[J(rev)]
plat[userId == 3]
plat[userId == 542]
plat[userId == 543]
plat[J(rev)][!is.na(platformType),]
rev_plotting <- plat[J(rev)][!is.na(platformType),]
lattice::barchart(revenue~factor(userId), data = rev_plotting
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue")
lattice::barchart(revenue~factor(userId), data = rev_plotting
, groups = factor(platformType)
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
lattice::barchart(revenue~factor(userId), data = rev_plotting
, groups = factor(platformType)
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue")
lattice::barchart(factor(userId)~revenue, data = rev_plotting
, groups = factor(platformType)
#, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue")
lattice::barchart(factor(userId)~revenue, data = rev_plotting
, groups = factor(platformType)
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue")
lattice::barchart(factor(userId)~revenue, data = rev_plotting
, groups = factor(platformType)
, border = "transparent"
, horizontal = FALSE
, scales = list(
x = list(draw = FALSE)
)
, ylab = "Total Revenue"
, auto.key = TRUE)
hitRatio
barchart(sort(hitRatio))
barchart(log(sort(hitRatio)))
barchart(exp(sort(hitRatio)))
barchart(sort(hitRatio))
barchart(sort(hitRatio), horizontal = FALSE)
barchart(sort(hitRatio), horizontal = FALSE, border = "transparent")
boxplot(~hitRatio, horizontal = FALSE, border = "transparent")
boxplot(hitRatio, horizontal = FALSE, border = "transparent")
dotplot(hitRatio, horizontal = FALSE, border = "transparent")
mean(hitRatio)
boxplot(hitRatio~factor(1), horizontal = FALSE, border = "transparent")
boxplot(hitRatio~1, horizontal = FALSE, border = "transparent")
boxplot(hitRatio~factor(rep(1, length(hitRatio))), horizontal = FALSE, border = "transparent")
boxplot(factor(rep(1, length(hitRatio)))~hitRatio, horizontal = FALSE, border = "transparent")
hr <- data.frame(hitRatio, lab = factor("a"))
boxplot(hitRatio~lab, data = hr, horizontal = FALSE, border = "transparent")
boxplot(lab~hitRatio, data = hr, horizontal = FALSE, border = "transparent")
stripplot(hitRatio~lab, data = hr, horizontal = FALSE, border = "transparent")
hr <- data.frame(hitRatio)
hr$userId <- as.integer(row.names(hr))
rev_plotting[J(hr)]
hr[J(rev_plotting)]
setkey(data.table(hr), userId)
hr[J(rev_plotting)]
library(data.table)
hr[J(rev_plotting)]
setkey(data.table(hr), userId)
hr <- data.table(hitRatio)
hr$userId <- as.integer(row.names(hr))
setkey(hr, userId)
hr[J(rev_plotting)]
hr
hr <- data.table(hitR = hitRatio)
hr$userId <- as.integer(row.names(hr))
setkey(hr, userId)
rev_plotting <- plat[J(rev)][!is.na(platformType),]
rev_plotting <- hr[J(rev_plotting)]
xyplot(revenue~hitR, data = rev_plotting)
rev_plotting <- hr[J(rev_plotting)][, platformType := factor(platformType)]
xyplot(revenue~hitR, data = rev_plotting, groups = platformType)
xyplot(log(revenue)~hitR, data = rev_plotting, groups = platformType)
xyplot(log(revenue)~hitR
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2))
xyplot(log(revenue)~hitR
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y)
})
xyplot(revenue~hitR
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y)
})
xyplot(revenue~hitR
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
})
xyplot(revenue~hitR
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = panel.superpose
, panel.groups = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
})
xyplot(revenue~hitR
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = panel.superpose
, panel.groups = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
}
, auto.key = TRUE)
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
}
, auto.key = TRUE)
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
}
, auto.key = list(position = "right"))
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
}
, auto.key = list(pos = "right"))
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
}
, simpleKey = list(pos = "right"))
??auto.key
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
}
, auto.key = list(space = "right"))
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
})
xyplot(revenue~hitR | platformType
, data = rev_plotting
, groups = platformType
#, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
})
xyplot(revenue~hitR | platformType
, data = rev_plotting
, subset = hitR < 0.3
, groups = platformType
#, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
})
xyplot(revenue~hitR | platformType
, data = rev_plotting
, subset = hitR < 0.2
, groups = platformType
#, xlim = c(0, 0.2)
, panel = function(x,y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, ...)
})
